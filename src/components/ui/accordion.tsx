// @/components/ui/accordion.tsx - The Knoux Legacy UI Accordion - FINALIZED EXCLUSIVE VERSION
// Component designed exclusively for Knoux BookSmith Ultra™ / Kitāb al-Mubīn™ project.
// Core purpose: To structure and reveal content sections (chapters, Q&A, library categories)
// with a premium, tactile, and historically resonant visual experience, deeply integrated with Knoux AI branding.
// Utilizes Radix UI components, styled heavily to embody Knoux's glassmorphism, exclusive icons, and fine-tuned themes.

import * as React from "react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
// Importing Knoux's custom icon set placeholder. For absolute exclusivity, replace `ChevronDown` from lucide-react.
// Ideally: import { KnouxChevronDownIcon } from "@/components/ui/KnouxIcons"; // Assuming a dedicated Knoux icon library.
import { ChevronDown } from "lucide-react"; // Keeping Lucide for now, but noting it *should* be a custom Knoux asset for ultimate exclusivity.

// Importing the essential cn utility for composable class names, ensuring adherence to our strict Tailwind theme.
import { cn } from "@/lib/utils";

// --- Core Accordion Components styled and branded as Knoux Exclusive Elements ---

/**
 * @KnouxAccordionRoot
 * The root component for the Accordion, establishing a unique collection context.
 * It's styled to seamlessly fit within the app's glassmorphism backdrop, applying the base theme for all accordion items.
 */
const KnouxAccordion = AccordionPrimitive.Root;
KnouxAccordion.displayName = "KnouxAccordionRoot"; // Naming reflects Knoux's ownership and design philosophy.

/**
 * @KnouxAccordionItem
 * Represents a single, collapsible item within the Accordion structure.
 * Crucial for structuring dynamic content like chapters, Q&A, or expandable library entries.
 * Styled with a subtle, premium separator line that complements the glassmorphic interface.
 */
const KnouxAccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    // Styling: Inherits the core theme with a subtle, non-intrusive border defined by the Knoux palette.
    // Ensures visual separation without disrupting the overall aesthetic flow.
    className={cn("border-b border-navy-800/50 last:border-b-0", className)} // Using brand-specific navy and ensuring the last item doesn't have a bottom border.
    {...props}
  />
));
KnouxAccordionItem.displayName = "KnouxAccordionItem"; // Explicitly branded for the Knoux ecosystem.

/**
 * @KnouxAccordionTrigger
 * The interactive element that expands and collapses content. This is a key touchpoint for user engagement.
 * Features responsive text styling, dynamic icon animation, and specific states for AI-generated content,
 * providing visual cues about the content's origin.
 */
const KnouxAccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger> & {
      /**
       * @isAiGenerated - Prop to indicate if the accordion content was generated by Knoux AI.
       * Displays a special visual cue (e.g., AI icon, glow) for AI-assisted sections.
       */
      isAiGenerated?: boolean;
      /**
       * @contentStatus - Allows visual indication of content status, e.g., 'draft', 'edited', 'ai-generated'.
       * For example, if 'ai-generated', applies special styling.
       */
      contentStatus?: "draft" | "edited" | "ai-generated";
  }
>(({ className, children, isAiGenerated = false, contentStatus, ...props }, ref) => {
  // Determine status indicator styling based on props
  const statusIndicatorClass = isAiGenerated || contentStatus === "ai-generated"
    ? "text-gold-400 animate-pulse" // A subtle pulse animation for AI content
    : contentStatus === "draft"
      ? "text-slate-gray" // Draft indicator color
      : contentStatus === "edited"
        ? "text-off-white" // Edited indicator color
        : "text-gray-400"; // Default indicator color

  return (
    <AccordionPrimitive.Header className="flex w-full">
      <AccordionPrimitive.Trigger
        ref={ref}
        // Core Styling for Knoux premium feel: glassmorphism, brand fonts, interactive states.
        className={cn(
          // Base styles: Full width, crisp text, generous padding, core brand fonts and colors.
          "flex w-full items-center justify-between py-4 px-5 font-serif text-lg font-medium transition-all duration-300 ease-in-out",
          // Text styling based on brand theme and interaction state.
          "text-off-white",
          // Hover and Focus states for premium interactivity.
          "hover:text-gold-400 hover:bg-navy-800/50 hover:backdrop-blur-lg", // Glassy blur effect on hover.
          // Open/Close animation state for the chevron icon.
          "[&[data-state=open]>svg]:rotate-180",
          // Dynamic styling for AI content and status indicators.
          contentStatus === "ai-generated" && "text-gold-400 !font-semibold", // AI content is prominent.
          className
        )}
        {...props}
      >
        <div className="flex items-center gap-3">
          {(isAiGenerated || contentStatus === "ai-generated") && (
            // Placeholder for a custom Knoux AI icon component (e.g., a subtle brain or glowing quill icon).
            // Replace this SVG with <KnouxAIIcon /> if KnouxIcons library is implemented.
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth="1.5"
              stroke="currentColor"
              className={`h-5 w-5 shrink-0 transition-colors duration-300 ${statusIndicatorClass}`} // Applying dynamic color to the icon
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M9.879 7.519c4.868-2.309 10.273.055 12.556 5.072 2.283 5.016-0.531 10.372-5.554 12.747-5.023 2.375-10.099-0.489-12.579-5.464-2.48-4.976-0.735-9.895 1.894-11.394z"
              />
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M6.542 11.156c1.752-4.137 6.021-7.503 10.477-6.898"
              />
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M9.88 18.464c2.607 1.298 5.742 1.579 8.242-.282"
              />
            </svg>
          )}
          {/* The actual title/text of the accordion trigger. */}
          <span className="flex-1">{children}</span>
        </div>
        {/* The standard collapse/expand chevron icon, styled to match the theme. */}
        <ChevronDown className="h-5 w-5 shrink-0 text-gray-400 transition-transform duration-300" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  );
});
KnouxAccordionTrigger.displayName = "KnouxAccordionTrigger"; // Explicitly branded for the Knoux ecosystem.

/**
 * @KnouxAccordionContent
 * The area containing the collapsible content. styled for optimal readability and a seamless expansion animation.
 * This component ensures content is presented beautifully and adheres to the Knoux design guidelines.
 */
const KnouxAccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    // Styling: Custom animation from Radix's keys, applied with precise durations and easing.
    // Enhanced padding and text styling specific to Knoux's content display.
    className={cn(
      "overflow-hidden text-md font-serif text-slate-gray transition-all duration-500 ease-in-out", // Soft text, refined font, and fluid animation.
      "data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down",
      className
    )}
    {...props}
  >
    {/* Content container with specific padding aligned with the trigger's icon and text. */}
    <div className={cn("pb-4 pt-0 pr-5 pl-9", className)}>{children}</div>
  </AccordionPrimitive.Content>
));
KnouxAccordionContent.displayName = "KnouxAccordionContent"; // Explicitly branded for the Knoux ecosystem.

// --- Exporting Knoux branded components ---
// These components are now intrinsically tied to Kitāb al-Mubīn's visual language and intended usage patterns.
// Exporting them under the Knoux prefix ensures clarity and prevents accidental use outside the Knoux ecosystem.
// We re-export with original names for potential compatibility within systems like `components.json`
// that might rely on standard naming, but these ARE the Knoux branded implementations.
export {
  KnouxAccordion as Accordion,
  KnouxAccordionItem as AccordionItem,
  KnouxAccordionTrigger as AccordionTrigger,
  KnouxAccordionContent as AccordionContent,
};
